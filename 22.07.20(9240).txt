22.07.20: 9240 풀기
9240 문제 내용{

    로버트 후드

로버트 후드는 로빈 후드의 동생이다. 로버트 후드는 자신의 형처럼 전설적인 인물이 되기 위해 활 쏘기를 연습하고 있다.

이번에 노팅엄에서 열린 활 쏘기 대회는 현대에 열리는 양궁과 규칙이 다르다. 양궁은 더 많은 점수를 쏜 사람이 승리하는 방식이다. 

하지만, 노팅엄 활 쏘기 대회에서는 과녁에 맞은 화살 사이의 거리 중 최댓값이 가장 큰 사람이 승리한다.

로버트 후드는 총 C발을 발사했고, 모든 화살은 과녁에 적중했다. 과녁을 이차원 평면으로, 화살은 점으로 나타낸다. 

화살의 좌표가 주어졌을 때, 가장 먼 화살의 거리를 구하는 프로그램을 작성하시오.

}

입력{

첫째 줄에 로버트 후드가 발사한 화살의 수 C (2 ≤ C ≤ 100,000)가 주어진다. 

다음 C개 줄에는 화살의 좌표가 주어진다. 좌표는 정수이고, 절댓값은 1,000을 넘지 않는다.

 }

출력{

가장 먼 두 화살의 거리를 출력한다. 상대/절대 오차가 10-6 이내인 경우에만 정답이다.

}

이번 문제는 앞의 문제와 달리 dp 가 아닌 기하학적 요소를 이용하여 푸는 문제이다.

우선 가장 먼 거리에 있는 점의 거리를 일일이 구할 수도 있겠지만 수가 너무 많기 때문에 시간초과가 발생한다.

그렇기에, 표본의 수를 줄여야 하는데 실질적으로 여러개의 점이 찍혀 있을 때 가장 바깥쪽에 있는 점들의 집합간의 거리가 가장 먼 것이

모든 점들 사이에서 가장 먼 거리를 이루는 점일 것이다. 따라서, 가장자리 점들의 집합을 다시 구하기 위해서 CCW를 이용해야 한다.

CCW(Counter ClockWise) - > 세 점이 주어졌을 때 세 점의 방향관계를 구할 수 있다.

점을 잇는 방향이 반시계 방향일 경우 : 양수, 시계: 음수, 0: 일직선

CCW : 외적을 이용하여 풀어야 한다. 따라서, 세개의 점(A, B, C)가 주어졌을 때  

A.x(B.y - C.y) + B.x(C.y - A.y) + C.x(A.y - B.y) 이 값을 이용하여 문제를 해결 하면된다.

느낀점{
    기존에는 naive하게 정답을 구했지만 파이썬의 경우 시간초과가 발생하며 java의 sort함수가 미숙하기에 c++밖에 구현하지 못했다.

    내일, 마저 시도해보면서 Rotating Calipers를 좀 더 알아 봐야 겠다.
}