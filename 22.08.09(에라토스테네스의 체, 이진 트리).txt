에라토스테네스의 체: 가장 효율적으로 소수를 탐색하는 방법이다.

1~100까지의 수가 존재 할 때, 소수를 판별하는 방법으로 1~10(100의 루트)까지의 값을 배가시키면서 걸리는 값을 판별한다.

이미 판별된 값은 검사하지 않으며 판별되지 않은 경우가 소수이다.

이 방법은 1~n 까지의 수가 존재할때 nlglgn의 시간복잡도를 갖는다.

기본 코드는 하단과 같다.

bool Prime[n+1] = true;
void getPrime(){
    for(int i=2; i * i <= n; i++){
        if(Prime[i] == false)continue;
        for(int j=i*i; j<=n; j+=i){
            Prime[j] = false;
        }
    }
} 

이진 트리: 트리의 한 종류로 루트노드가 존재하며 루트노드의 자식노드가 최대 2개로 제한되어 있는 트리이다.

이진 트리에도 종류가 꽤 존재하는데 그 중 완전 이진 트리와 균형 이진 트리가 중요한 트리들이다.

균형된 트리를 구성하는 이유는 시간복잡도를 줄이기 위함이다. 같은 이진 트리이지만 균형이 한쪽으로 쏠려있는 경우

노드의 수가 n이라고 했을때 어떤 값을 판별하는데 걸리는 시간복잡도는 O(N)이다.

하지만, 균형잡힌 트리의 경우에는 시간을 lg(n)의로 줄일 수 있다. 이러한 이유 때문에 균형된 이진트리가 중요하다.

순회: 말 그래도 트리를 순회하는 것이다. 보통 재귀문을 사용하여 순회를 진행하며 값을 확인 할 때 사용한다.

순회 방법: 전위 순회, 중위 순회, 후위 순회

전위 순회: 좌측 부터 순회하는 방법으로 