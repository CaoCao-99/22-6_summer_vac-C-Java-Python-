Dynamic Programming(DP): 큰 문제를 나누어서 해결한다.

대부분의 DP 문제의 경우, 점화식을 잘 세우기만 하면 문제를 해결할 수 있는것 같으며 점화식을 세우는 것이 가장 어렵지만 중요한 부분인 것 같다.

점화식과 더불어, 재귀적으로 문제를 줄여나가는 경우도 많기 때문에 Dp 배열의 초기화도 중요하다!!

하단에 있는 2가지의 문제를 해결하는 방법도 결국에는 점화식을 올바르게 세운 것이 전제가 되는 알고리즘들이다.

CMM: Chained Matrix Multiplication(연쇄 행렬 최소곱셈) - > 행렬 곱셈에 수행되는 횟수를 최소로 하는 알고리즘이다.

행렬의 곱하는 순서에 따라 수행되는 횟수가 달라지기 때문에 연산을 최소한으로 하는 것이 효율적이며

이러한 효율적 계산을 위해 존재하는 알고리즘이다.

N개의 행렬이 존재할때 모든 경우의 수를 확인하는 Brute-force 알고리즘은 O(2 ^ n) 이다.

하지만 CMM 알고리즘을 사용하게 되면 시간복잡도가 O(n ^ 2)이 된다.

CMM 알고리즘은 DP 배열을 사용하는 알고리즘이다.

DP[i][j] = i번째 행렬부터 j번째 행렬까지의 최소 곱셈 횟수

i번째 행렬의 크기가 n x m 일 경우, matrix[i][0] = n, matrix[i][1] = m; 으로 표현한다.

DP[i][j] = DP[i][k] + DP[k+1][j] + matrix[i][0] * matrix[j][1] * matrix[k][1](i <=k<j)

점화식은 상단과 같은 형태로 나오게 된다. 하단에 최종 코드를 작성해 보면

void CMM(int n){
    for(int i=0; i<n; i++){
        for(int j=0; j < n-i; j++){
            int a = i;
            int b = i+j;
            if(a == b){
                dp[a][b] = 0;
            }
            else{
                dp[a][b] = INF;
                for(int z = a; z<b; z++){
                    dp[a][b] = min(dp[a][b], dp[a][z] + dp[z+1][b] + matrix[a][0] * matrix[z][1] * matrix[b][1]);
                }
            }
        }
    }
}

코드의 반복문을 보면 바깥쪽은 i가 0 ~ n-1 까지 증가하지만, 내부의 j 의 경우 0 ~ n-i 까지 증가한다.

따라서, j의 값은 i의 값이 커질수록 반복횟수가 줄어들게 된다.

b의 경우를 보면 값이 최대 n 까지만 증가할 수 있도록 설정 되어있으며 그렇기 위해서 위와 같은 반복문 조건이 필요하다.

a와 b 의 값을 갖고 k 번째의 수를 이동시켜가며 dp[a][b] 즉, a 번째 ~ b 번째 행렬의 곱의 최소값을 a~k * k+1 ~ b 로 반복문을 수행하여 구해준다.

LCS/ Edit(toggling): 두 알고리즘 모두 LCS를 기본으로 한다. 

LCS: 1.최장 공통 문자열(Longest Common Substring), 2.최장 공통 부분수열(Longest Common Subsequence)

2가지 문자열의 차이는 연속성 의무의 유/무이다. 

공통 문자열의 경우 연속적으로 값이 동일하여야 하지만 최장 공통 부분수열은 말 그대로 부분만 공통되어도 가능하다.

먼저 공통문자열의 경우, 두개 이상의 문자열이 존재할 때 최장 길이의 공통 문자열을 찾는 것이 목적이다. 

이 알고리즘도 역시 DP배열이 필요하다. 처음 DP 배열을 설정한 후(DP[문자열 A 길이][문자열 B 길이])

두 문자열중 하나라도 문자열이 존재하지 않는 경우는 값을 0으로 설정해준다.(i == 0 or j == 0)

DP[i][j] = 첫 번째 문자열 A의 i번째 문자와 두 번째 문자열 B의 j 번째 문자에서의 최대 길이로 표현 된다.

3가지의 경우를 나눠 값을 할당 할 수 있다.

if(A[i] == B[j]){
    dp[i][j] = dp[i-1][j-1] + 1; 
}
else{
    dp[i][j] = 0;
}

공통 부분수열의 경우, 두개 이상의 문자열이 존재할 때 최장 길이의 부분 문자열을 찾는 것이 목적이다. 

이 알고리즘도 역시 DP배열이 필요하다. 처음 DP 배열을 설정한 후(DP[문자열 A 길이][문자열 B 길이])

두 문자열중 하나라도 문자열이 존재하지 않는 경우는 값을 0으로 설정해준다.(i == 0 or j == 0)

DP[i][j] = 첫 번째 문자열 A의 i번째 문자와 두 번째 문자열 B의 j 번째 문자에서의 최대 길이로 표현 된다.

DP의 값을 정하는 경우는 2가지로 나눌 수 있다.

1. i 번째 문자와 j 번째 문자가 동일한 경우: DP[i][j] = dp[i-1][j-1] + 1

2. i 번쨰 문자와 j 번째 문자가 동일하지 않은 경우: DP[i][j] = max(DP[i][j-1], DP[i-1][j])

if(A[i] == B[j]){
    DP[i][j] = dp[i-1][j-1] + 1
}
else{
    dp[i][j] = max(dp[i][j-1], dp[i-1][j])+1
}

이렇게 DP 값을 모두 채우게 되면 완성된다.

DP배열을 이용하여 가장 긴 부분 수열을 출력할수 있으며 이것은 Dp 배열을 역순으로 찾아가면 된다.

DP[n][m] 부터 시작하여 DP[n-1][m], DP[n][m-1] 중 값이 같은 곳으로 이동한다. 두개 다 값이 같지 않다면 대각선 DP[n-1][m-1]로 이동하며 문자를 스택에 넣어준다.

반복을 통하여 문자열을 구할 수 있다.

Edit(편집거리): 문자열 A, B 가 주어졌을때 A 문자열을 B 문자열과 같이 만들기 위해서 최소 몇번의 편집이 들어가는지 구하는 문제(편집: 삽입, 삭제, 대체)

위의 LCS 문제와 마찬가지로 DP배열과 점화식만 잘 생성한다면 풀 수 있는 문제이다.

먼저 DP[a][b]를 생성해주고 (DP[0][0] = 0, DP[0][j] = j, DP[i][0] = i) 이러한 방식으로 둘 중에 하나라도 문자열이 존재하지 않는 경우 값을 모두 바꿔야 하므로 해당 길이로 초기화 시켜준다.

이후, 위와 같은 방법으로 DP의 할당 값을 2가지 경우로 나눠서 할당할 수 있다.

1. i == j 2. i != j

1. 두가지의 값이 같은 경우 Dp[i][j] = Dp[i-1][j-1]

2. 다른 경우: 다른 경우 총 3가지 경우(삽입, 삭제, 대체) 중 가장 작은 값을 받아온 뒤 1을 더해주면 된다.

DP[i][j] = min(Dp[i][j-1](삭제), dp[i-1][j](삽입), dp[i-1][j-1](대체)) + 1

이러한 방식으로 문제를 해결할 수 있다.

하지만, 데이터가 많은 경우에 위와 같은 방식은 메모리를 상당히 많이 잡아먹게 된다.

그래서 togglig을 사용하면 데이터를 덜 차지할 수 있다. 

toggling: 토글이란 하나의 설정 값으로부터 다른 값으로 전환하는 것이다.

위의 점화식을 잘 보게 되면 연산에 쓰이는 배열은 dp[i-1], dp[i] 배열이다. 즉, 2줄의 배열만이 필요하다.

따라서, 우리는 Dp[n][m] - > Dp[2][m]으로 바꿀 수 있으며

for(int i=0; i<a.length(); i++){
    int index = i%2;
    for(int j =0; j<b.length(); j++){
        if(a[i] == b[j]){
        dp[index][j] = dp[!index][j-1]
    }}
}

위와 같은 코드에서 처럼 index로 대체하여 메모리를 아낄 수 있다.

이러한 방식은 데이터가 많은 경우 사용하면 도움이 될 것 같다.