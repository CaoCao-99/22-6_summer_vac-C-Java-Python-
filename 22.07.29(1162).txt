22.07.29: 1162 풀기
1162 문제 내용{

  도로 포장

준영이는 매일 서울에서 포천까지 출퇴근을 한다. 하지만 잠이 많은 준영이는 늦잠을 자 포천에 늦게 도착하기 일쑤다. 

돈이 많은 준영이는 고민 끝에 K개의 도로를 포장하여 서울에서 포천까지 가는 시간을 단축하려 한다.

문제는 N개의 도시가 주어지고 그 사이 도로와 이 도로를 통과할 때 걸리는 시간이 주어졌을 때 최소 시간이 걸리도록 하는 K개의 이하의 도로를 포장하는 것이다. 

도로는 이미 있는 도로만 포장할 수 있고, 포장하게 되면 도로를 지나는데 걸리는 시간이 0이 된다. 

또한 편의상 서울은 1번 도시, 포천은 N번 도시라 하고 1번에서 N번까지 항상 갈 수 있는 데이터만 주어진다.

}

입력{

첫 줄에는 도시의 수 N(1 ≤ N ≤ 10,000)과 도로의 수 M(1 ≤ M ≤ 50,000)과 포장할 도로의 수 K(1 ≤ K ≤ 20)가 공백으로 구분되어 주어진다. 

M개의 줄에 대해 도로가 연결하는 두 도시와 도로를 통과하는데 걸리는 시간이 주어진다. 도로들은 양방향 도로이며, 걸리는 시간은 1,000,000보다 작거나 같은 자연수이다.

 }

출력{

첫 줄에 K개 이하의 도로를 포장하여 얻을 수 있는 최소 시간을 출력한다.

}

DP를 이용하여 해결 할 수 있는 문제이다. 우선순위 큐도 사용(최소값을 정해야 하기 때문에 오름차순으로 정리 - > 가중치를 음수로 집어 넣고 꺼낼때 양수로 바꾸기)

dp[현재도시][포장한 도로의 수]로 배열을 생성(최대값으로 초기화)하고 현재도시가 도착도시인 경우에서의 최소값을 구하면 된다.

점화식은 1.도로 포장이 가능한 경우 - > if(cnt < k && dp [다음도시][포장도시수 + 1] > 현재도시 이동량) 대체 및 우선순위 큐에 push

        2. 포장 X -> if(dp[다음도시][포장 도시수] > 현재 도시 이동량 + 다음 도시 가중치) 대체 및 우선순위 큐에 push



느낀점{
    
    c언어를 이용하여 문제를 푸는 것 보다 java 또는 python을 이용하여 문제를 푸는 것이 더 어려운 것 같다.

    같은 알고리즘임에도 불구하고 얼마나 효율적으로 짰는지에 따라 C언어는 통과 됐지만 java의 경우 메모리 초과를 발생시킨다.

    같은 알고리즘을 사용하더라도 최대한 계산을 덜 하는 방식을 택해야 할 것 같다.
    
}