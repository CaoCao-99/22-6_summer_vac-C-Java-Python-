누적합: 배열이 주어졌을 때 배열의 값이 변하지 않고 배열의 index 번호까지의 합을 배열[index]에 담아두는 것

부분 배열 합: 누적합을 이용하여 부분 합을 알아내는 알고리즘

부분배열의 값을 Brute-force로 알아내면 시간복잡도가 O(n ^ 2)지만, 누적합을 이용하게 되면

계산 시간은 상수시간 복잡도를 갖게된다. 물론, 2차원 누적합의 경우에는 O(n ^ 2)이 걸리지만 연산 하는 시간은 상수시간 밖에 소요되지 않는다.

하단에 코드는 2차원 배열에서의 누적합을 이용한 부분합을 구하는 코드이다.

int list[n][m] = 0
void get_sum(){
    //행 먼저 더하기
    for(int i=0; i<n; i++){
        list[i][0] = arr[i][0];
        for(int j=1; j<m; j++){
            list[i][j] += list[i][j-1] + arr[i][j];
        }
    }
    // 열 더하기
    for(int i=0; i<m; i++){
        for(int j=1; j<n; j++){
            list[j][i] += list[j-1][i];
        }
    }
}
//부분합 구하기
int part_sum(int a, int b, int c, int d){//(a,b) ~ (c,d)
    list[c][d] - (list[c][b] + list[a][d] - list[a][b])
}

memoization: 이전에 계산한 값을 메모리에 저장하여 이후 연산에 사용하는 방법

미리 계산한 값을 다시 활용하기에 일일이 계산하는 것보다 훨씬 효율적인 알고리즘이다.

하단에 피보나치 수열을 계산하는 코드(재귀, memoization)를 비교하면 이해하기 편하다.

//재귀
void fibo_rec(int n){
    if(n == 1 || n == 2)return 1;
    return fibo_rec(n-1) + fibo_rec(n-2);
}
//memoization
int fibo[n] = -1;
void fibo_mem(int n){
    if(fibo[n] != -1){
        return fibo[n];
    }
    else if(n == 1 || n == 2)return 1;
    else fibo(n-2) + fibo(n-1)
}